from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from aiogram.dispatcher.filters.state import StatesGroup, State, default_state
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Text
from config import TOKEN
from keyboards import *
from check_token import check_token
from db.create_db import *


storage = MemoryStorage()
bot = Bot(TOKEN)
dp = Dispatcher(bot, storage=storage)


class Actions(StatesGroup):

    choose_actions = State()
    add_token = State()
    add_token_amount = State()
    add_token_price = State()
    add_token_in_database = State()
    buy_token = State()
    sell_token = State()
    portfolio = State()


async def on_startup(_):
    print('–ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!')


@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    await bot.send_message(chat_id=message.from_user.id,
                           text="–ü—Ä–∏–≤–µ—Ç! ü§ñ –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –∫—Ä–∏–ø—Ç–æ–ø–æ—Ä—Ç—Ñ–µ–ª–µ–º.\n"\
                           "–ù–µ –∑–∞–±—É–¥—å –∑–∞–≥–ª—è–Ω—É—Ç—å –≤ '–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?' –¥–ª—è –ø–æ–¥—Ä–æ–±–Ω–æ–π –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏.\n"\
                            "–£–¥–∞—á–∏ –≤ —Ç—Ä–µ–π–¥–∏–Ω–≥–µ! üöÄ",
                           reply_markup=main_keyboard)
    await message.delete()


@dp.message_handler(Text(equals='–ü–æ—Ä—Ç—Ñ–µ–ª—å'))
async def show_portfolio(message: types.Message):
    portfolio = get_user_portfolio(int(message.from_user.id))
    message_text = '–ú–æ–Ω–µ—Ç–∞ | –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ | –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å | –§–∏–Ω–∞–Ω—Å–æ–≤—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç\n'
    for token in portfolio:
        token_info = portfolio[token]
        message_text += f"{token} | {token_info['token_amount']} | {token_info['token_value']}$ | \
        {token_info['financial_results']}$ ({token_info['financial_results_percentages']}%)\n"
        message_text += '-----------------------------------\n'
    await message.answer(message_text)

@dp.message_handler(Text(equals='–î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é'))
async def add_new_token(message: types.Message, state : FSMContext):
    await bot.send_message(chat_id=message.from_user.id,
                           text="–í—ã–±–µ—Ä–∏—Ç–µ –æ–ø–µ—Ä–∞—Ü–∏—é",
                           reply_markup=actions_keyboard)
    await state.set_state(Actions.choose_actions)


@dp.message_handler(Text(equals='–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é'), state="*")
async def cancel_action(message: types.Message, state : FSMContext):
    await bot.send_message(chat_id=message.from_user.id,
                           text="–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞",
                           reply_markup=main_keyboard)
    await state.finish()


@dp.message_handler(Text(equals='–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?'))
async def sent_help_message(message: types.Message, state : FSMContext):
    help_text = "ü§ñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º?** ü§ñ\n\n"\
        "**‚óè –î–æ–±–∞–≤–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é:** –ù–∞–∂–º–∏, —á—Ç–æ–±—ã –∫—É–ø–∏—Ç—å/–ø—Ä–æ–¥–∞—Ç—å –º–æ–Ω–µ—Ç—ã –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –∏—Ö –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å.\n"\
        "   ‚óè **–ö—É–ø–∏—Ç—å:** –ü–æ–∫—É–ø–∫–∞ –Ω–æ–≤–æ–π –º–æ–Ω–µ—Ç—ã –∑–∞ —Å—á–µ—Ç USDT –≤ –ø–æ—Ä—Ç—Ñ–µ–ª–µ. –£–∫–∞–∂–∏ –∫–æ–ª-–≤–æ –∏ —Ü–µ–Ω—É.\n"\
        "   ‚óè **–ü—Ä–æ–¥–∞—Ç—å:** –ü—Ä–æ–¥–∞–∂–∞ –∏–º–µ—é—â–µ–π—Å—è –º–æ–Ω–µ—Ç—ã. –£–∫–∞–∂–∏ –∫–æ–ª-–≤–æ, –∏ –º–æ–Ω–µ—Ç–∞ –±—É–¥–µ—Ç –ø—Ä–æ–¥–∞–Ω–∞ –∑–∞ USDT.\n"\
        "   ‚óè **–î–µ–ø–æ–∑–∏—Ç:** –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –º–æ–Ω–µ—Ç—ã –≤ –ø–æ—Ä—Ç—Ñ–µ–ª—å. –£–∫–∞–∂–∏ –∫–æ–ª-–≤–æ –∏ —Ü–µ–Ω—É.\n\n"\
        "**‚óè –ü–æ—Ä—Ç—Ñ–µ–ª—å:** –ü–æ–ª—É—á–∏ –æ–±–∑–æ—Ä —Å–≤–æ–µ–≥–æ —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ä—Ç—Ñ–µ–ª—è.\n\n"\
        "üöÄ –ü—Ä–∏—è—Ç–Ω–æ–≥–æ —Ç—Ä–µ–π–¥–∏–Ω–≥–∞! üöÄ"
    await message.answer(help_text, parse_mode="Markdown")


@dp.message_handler(state=Actions.choose_actions)
async def choose_action(message: types.Message, state: FSMContext):
    await state.update_data(user_id=int(message.from_user.id))
    if message.text == "–î–µ–ø–æ–∑–∏—Ç":
        await state.update_data(action='add')
        await state.set_state(Actions.add_token)
        await bot.send_message(chat_id=message.from_user.id,
                           text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã",
                           reply_markup=close_action_keyboard)
    elif message.text == "–ö—É–ø–∏—Ç—å":
        await state.update_data(action='buy')
        await state.set_state(Actions.buy_token)
        await bot.send_message(chat_id=message.from_user.id,
                           text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã",
                           reply_markup=close_action_keyboard)
    elif message.text == '–í–µ—Ä–Ω—É—Ç—å—Å—è':
        await state.finish()
        await bot.send_message(chat_id=message.from_user.id, text='–í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é', reply_markup=main_keyboard)
        return None
    elif message.text == "–ü—Ä–æ–¥–∞—Ç—å":
        await state.update_data(action='sell')
        await state.set_state(Actions.sell_token)
        await bot.send_message(chat_id=message.from_user.id,
                           text = "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–Ω–µ—Ç—ã",
                           reply_markup=close_action_keyboard)
    else:
        await state.finish()
        await bot.send_message(chat_id=message.from_user.id, 
                               text='–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ', 
                               reply_markup=main_keyboard)



@dp.message_handler(state=Actions.sell_token)
async def sell_token_from_portfolio(message: types.Message, state: FSMContext):
    await state.update_data(token_name=message.text.upper())
    new_token = await state.get_data()
    if check_token_in_portfolio(new_token):
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç")
        await state.set_state(Actions.add_token_amount)
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text=f"–ú–æ–Ω–µ—Ç—ã {new_token['token_name']} –Ω–µ—Ç –≤ –≤–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ",
                               reply_markup=main_keyboard)
        await state.finish()


@dp.message_handler(state=Actions.buy_token)
async def buy_token_for_portfolio(message: types.Message, state: FSMContext):
    if check_token(message.text.upper()):
        await state.update_data(token_name=message.text.upper())
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç")
        await state.set_state(Actions.add_token_amount)
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text='–ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ',
                               reply_markup=main_keyboard)
        await state.finish()

@dp.message_handler(state=Actions.add_token)
async def add_new_token_in_database(message: types.Message, state: FSMContext):
    if check_token(message.text.upper()):
        await state.update_data(token_name=message.text.upper())
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–æ–Ω–µ—Ç')
        await state.set_state(Actions.add_token_amount)
    else:
        await bot.send_message(chat_id=message.from_user.id,
                               text='–ú–æ–Ω–µ—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –Ω–∞ –±–∏—Ä–∂–µ',
                               reply_markup=main_keyboard)
        await state.finish()


@dp.message_handler(state=Actions.add_token_amount)
async def add_token_amount(message: types.Message, state: FSMContext):
    try:
        if "," in message.text:
            add_token_amount = message.text.replace(',', '.')
            add_token_amount = float(add_token_amount)
        else:
            add_token_amount = float(message.text)
        await state.update_data(token_amount=add_token_amount)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –º–æ–Ω–µ—Ç—ã')
        await state.set_state(Actions.add_token_price)
    except ValueError:
        await bot.send_message(chat_id=message.from_user.id,
                               text='–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                               reply_markup=main_keyboard)
        await state.finish()


@dp.message_handler(state=Actions.add_token_price)
async def add_token_price(message: types.Message, state: FSMContext):
    try:
        if "," in message.text:
            add_token_price = message.text.replace(',', '.')
            add_token_price = float(add_token_price)
        else:
            add_token_price = float(message.text)
    except ValueError:
        await bot.send_message(chat_id=message.from_user.id,
                            text='–í–≤–µ–¥–µ–Ω–æ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ',
                            reply_markup=main_keyboard)
        await state.finish()
    else:
        await state.update_data(token_price=add_token_price)
        new_token = await state.get_data()
        #print(new_token)
        if new_token['action'] == 'add':
            result = check_id_in_database(new_token)
            if result:
                await bot.send_message(chat_id=message.from_user.id,
                                text=f"–ú–æ–Ω–µ—Ç–∞ {new_token['token_name']} –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º {new_token['token_amount']} –ø–æ —Ü–µ–Ω–µ {new_token['token_price']} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –ø—Ä–æ—Ç—Ñ–µ–ª—å",
                                reply_markup=main_keyboard)
            else:
                await bot.send_message(chat_id=message.from_user.id,
                                    text='–û—à–∏–±–∫–∞')
        elif new_token['action'] == 'sell':
            if sell_token(new_token):
                await bot.send_message(chat_id=message.from_user.id,
                                    text=f"–ú–æ–Ω–µ—Ç–∞ {new_token['token_name']} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {new_token['token_amount']} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–¥–∞–Ω–∞",
                                    reply_markup=main_keyboard)
            else:
                await bot.send_message(chat_id=message.from_user.id,
                                    text=f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∂–∏",
                                    reply_markup=main_keyboard)
        elif new_token['action'] == 'buy':
            if check_token_in_portfolio(new_token):
                await bot.send_message(chat_id=message.from_user.id,
                                    text=f"–ú–æ–Ω–µ—Ç–∞ {new_token['token_name']} –≤ –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ {new_token['token_amount']} –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –≤–∞—à –ø–æ—Ä—Ç—Ñ–µ–ª—å",
                                    reply_markup=main_keyboard)
            else:
                await bot.send_message(chat_id=message.from_user.id,
                                    text='–í –≤–∞—à–µ–º –ø–æ—Ä—Ç—Ñ–µ–ª–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤',
                                    reply_markup=main_keyboard)
        await state.finish()


if __name__ == '__main__':
    executor.start_polling(dp, on_startup=on_startup,
                           skip_updates=True)  # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞